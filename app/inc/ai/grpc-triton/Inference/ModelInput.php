<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;.. cpp:var:: message ModelInput
 *&#64;&#64;
 *&#64;&#64;   An input required by the model.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelInput</code>
 */
class ModelInput extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     *&#64;&#64;  .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;     The data-type of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 2;</code>
     */
    protected $data_type = 0;
    /**
     *&#64;&#64;  .. cpp:var:: Format format
     *&#64;&#64;
     *&#64;&#64;     The format of the input. Optional.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelInput.Format format = 3;</code>
     */
    protected $format = 0;
    /**
     *&#64;&#64;  .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;     The dimensions/shape of the input tensor that must be provided
     *&#64;&#64;     when invoking the inference API for this model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 4;</code>
     */
    private $dims;
    /**
     *&#64;&#64;  .. cpp:var:: ModelTensorReshape reshape
     *&#64;&#64;
     *&#64;&#64;     The shape expected for this input by the backend. The input will
     *&#64;&#64;     be reshaped to this before being presented to the backend. The
     *&#64;&#64;     reshape must have the same number of elements as the input shape
     *&#64;&#64;     specified by 'dims'. Optional.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelTensorReshape reshape = 5;</code>
     */
    protected $reshape = null;
    /**
     *&#64;&#64;  .. cpp:var:: bool is_shape_tensor
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is a shape tensor to the model. This field
     *&#64;&#64;     is currently supported only for the TensorRT model. An error will be
     *&#64;&#64;     generated if this specification does not comply with underlying
     *&#64;&#64;     model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool is_shape_tensor = 6;</code>
     */
    protected $is_shape_tensor = false;
    /**
     *&#64;&#64;  .. cpp:var:: bool allow_ragged_batch
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is allowed to be "ragged" in a dynamically
     *&#64;&#64;     created batch. Default is false indicating that two requests will
     *&#64;&#64;     only be batched if this tensor has the same shape in both requests.
     *&#64;&#64;     True indicates that two requests can be batched even if this tensor
     *&#64;&#64;     has a different shape in each request.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool allow_ragged_batch = 7;</code>
     */
    protected $allow_ragged_batch = false;
    /**
     *&#64;&#64;  .. cpp:var:: bool optional
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is optional for the model execution.
     *&#64;&#64;     If true, the input is not required in the inference request.
     *&#64;&#64;     Default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool optional = 8;</code>
     */
    protected $optional = false;
    /**
     *&#64;&#64;  .. cpp:var:: bool is_non_linear_format_io
     *&#64;&#64;
     *&#64;&#64;     Indicates whether the input tensor uses a non-linear IO format. This
     *&#64;&#64;     field is currently supported only for TensorRT models. An error will
     *&#64;&#64;     be generated if this specification does not comply with the
     *&#64;&#64;     underlying model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool is_non_linear_format_io = 9;</code>
     */
    protected $is_non_linear_format_io = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *          &#64;&#64;  .. cpp:var:: string name
     *          &#64;&#64;
     *          &#64;&#64;     The name of the input.
     *          &#64;&#64;
     *     @type int $data_type
     *          &#64;&#64;  .. cpp:var:: DataType data_type
     *          &#64;&#64;
     *          &#64;&#64;     The data-type of the input.
     *          &#64;&#64;
     *     @type int $format
     *          &#64;&#64;  .. cpp:var:: Format format
     *          &#64;&#64;
     *          &#64;&#64;     The format of the input. Optional.
     *          &#64;&#64;
     *     @type int[]|string[]|\Google\Protobuf\Internal\RepeatedField $dims
     *          &#64;&#64;  .. cpp:var:: int64 dims (repeated)
     *          &#64;&#64;
     *          &#64;&#64;     The dimensions/shape of the input tensor that must be provided
     *          &#64;&#64;     when invoking the inference API for this model.
     *          &#64;&#64;
     *     @type \Inference\ModelTensorReshape $reshape
     *          &#64;&#64;  .. cpp:var:: ModelTensorReshape reshape
     *          &#64;&#64;
     *          &#64;&#64;     The shape expected for this input by the backend. The input will
     *          &#64;&#64;     be reshaped to this before being presented to the backend. The
     *          &#64;&#64;     reshape must have the same number of elements as the input shape
     *          &#64;&#64;     specified by 'dims'. Optional.
     *          &#64;&#64;
     *     @type bool $is_shape_tensor
     *          &#64;&#64;  .. cpp:var:: bool is_shape_tensor
     *          &#64;&#64;
     *          &#64;&#64;     Whether or not the input is a shape tensor to the model. This field
     *          &#64;&#64;     is currently supported only for the TensorRT model. An error will be
     *          &#64;&#64;     generated if this specification does not comply with underlying
     *          &#64;&#64;     model.
     *          &#64;&#64;
     *     @type bool $allow_ragged_batch
     *          &#64;&#64;  .. cpp:var:: bool allow_ragged_batch
     *          &#64;&#64;
     *          &#64;&#64;     Whether or not the input is allowed to be "ragged" in a dynamically
     *          &#64;&#64;     created batch. Default is false indicating that two requests will
     *          &#64;&#64;     only be batched if this tensor has the same shape in both requests.
     *          &#64;&#64;     True indicates that two requests can be batched even if this tensor
     *          &#64;&#64;     has a different shape in each request.
     *          &#64;&#64;
     *     @type bool $optional
     *          &#64;&#64;  .. cpp:var:: bool optional
     *          &#64;&#64;
     *          &#64;&#64;     Whether or not the input is optional for the model execution.
     *          &#64;&#64;     If true, the input is not required in the inference request.
     *          &#64;&#64;     Default value is false.
     *          &#64;&#64;
     *     @type bool $is_non_linear_format_io
     *          &#64;&#64;  .. cpp:var:: bool is_non_linear_format_io
     *          &#64;&#64;
     *          &#64;&#64;     Indicates whether the input tensor uses a non-linear IO format. This
     *          &#64;&#64;     field is currently supported only for TensorRT models. An error will
     *          &#64;&#64;     be generated if this specification does not comply with the
     *          &#64;&#64;     underlying model.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;     The data-type of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 2;</code>
     * @return int
     */
    public function getDataType()
    {
        return $this->data_type;
    }

    /**
     *&#64;&#64;  .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;     The data-type of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setDataType($var)
    {
        GPBUtil::checkEnum($var, \Inference\DataType::class);
        $this->data_type = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: Format format
     *&#64;&#64;
     *&#64;&#64;     The format of the input. Optional.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelInput.Format format = 3;</code>
     * @return int
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     *&#64;&#64;  .. cpp:var:: Format format
     *&#64;&#64;
     *&#64;&#64;     The format of the input. Optional.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelInput.Format format = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFormat($var)
    {
        GPBUtil::checkEnum($var, \Inference\ModelInput_Format::class);
        $this->format = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;     The dimensions/shape of the input tensor that must be provided
     *&#64;&#64;     when invoking the inference API for this model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDims()
    {
        return $this->dims;
    }

    /**
     *&#64;&#64;  .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;     The dimensions/shape of the input tensor that must be provided
     *&#64;&#64;     when invoking the inference API for this model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 4;</code>
     * @param int[]|string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDims($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->dims = $arr;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: ModelTensorReshape reshape
     *&#64;&#64;
     *&#64;&#64;     The shape expected for this input by the backend. The input will
     *&#64;&#64;     be reshaped to this before being presented to the backend. The
     *&#64;&#64;     reshape must have the same number of elements as the input shape
     *&#64;&#64;     specified by 'dims'. Optional.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelTensorReshape reshape = 5;</code>
     * @return \Inference\ModelTensorReshape
     */
    public function getReshape()
    {
        return $this->reshape;
    }

    /**
     *&#64;&#64;  .. cpp:var:: ModelTensorReshape reshape
     *&#64;&#64;
     *&#64;&#64;     The shape expected for this input by the backend. The input will
     *&#64;&#64;     be reshaped to this before being presented to the backend. The
     *&#64;&#64;     reshape must have the same number of elements as the input shape
     *&#64;&#64;     specified by 'dims'. Optional.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelTensorReshape reshape = 5;</code>
     * @param \Inference\ModelTensorReshape $var
     * @return $this
     */
    public function setReshape($var)
    {
        GPBUtil::checkMessage($var, \Inference\ModelTensorReshape::class);
        $this->reshape = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool is_shape_tensor
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is a shape tensor to the model. This field
     *&#64;&#64;     is currently supported only for the TensorRT model. An error will be
     *&#64;&#64;     generated if this specification does not comply with underlying
     *&#64;&#64;     model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool is_shape_tensor = 6;</code>
     * @return bool
     */
    public function getIsShapeTensor()
    {
        return $this->is_shape_tensor;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool is_shape_tensor
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is a shape tensor to the model. This field
     *&#64;&#64;     is currently supported only for the TensorRT model. An error will be
     *&#64;&#64;     generated if this specification does not comply with underlying
     *&#64;&#64;     model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool is_shape_tensor = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsShapeTensor($var)
    {
        GPBUtil::checkBool($var);
        $this->is_shape_tensor = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool allow_ragged_batch
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is allowed to be "ragged" in a dynamically
     *&#64;&#64;     created batch. Default is false indicating that two requests will
     *&#64;&#64;     only be batched if this tensor has the same shape in both requests.
     *&#64;&#64;     True indicates that two requests can be batched even if this tensor
     *&#64;&#64;     has a different shape in each request.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool allow_ragged_batch = 7;</code>
     * @return bool
     */
    public function getAllowRaggedBatch()
    {
        return $this->allow_ragged_batch;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool allow_ragged_batch
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is allowed to be "ragged" in a dynamically
     *&#64;&#64;     created batch. Default is false indicating that two requests will
     *&#64;&#64;     only be batched if this tensor has the same shape in both requests.
     *&#64;&#64;     True indicates that two requests can be batched even if this tensor
     *&#64;&#64;     has a different shape in each request.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool allow_ragged_batch = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowRaggedBatch($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_ragged_batch = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool optional
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is optional for the model execution.
     *&#64;&#64;     If true, the input is not required in the inference request.
     *&#64;&#64;     Default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool optional = 8;</code>
     * @return bool
     */
    public function getOptional()
    {
        return $this->optional;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool optional
     *&#64;&#64;
     *&#64;&#64;     Whether or not the input is optional for the model execution.
     *&#64;&#64;     If true, the input is not required in the inference request.
     *&#64;&#64;     Default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool optional = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setOptional($var)
    {
        GPBUtil::checkBool($var);
        $this->optional = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool is_non_linear_format_io
     *&#64;&#64;
     *&#64;&#64;     Indicates whether the input tensor uses a non-linear IO format. This
     *&#64;&#64;     field is currently supported only for TensorRT models. An error will
     *&#64;&#64;     be generated if this specification does not comply with the
     *&#64;&#64;     underlying model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool is_non_linear_format_io = 9;</code>
     * @return bool
     */
    public function getIsNonLinearFormatIo()
    {
        return $this->is_non_linear_format_io;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool is_non_linear_format_io
     *&#64;&#64;
     *&#64;&#64;     Indicates whether the input tensor uses a non-linear IO format. This
     *&#64;&#64;     field is currently supported only for TensorRT models. An error will
     *&#64;&#64;     be generated if this specification does not comply with the
     *&#64;&#64;     underlying model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool is_non_linear_format_io = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsNonLinearFormatIo($var)
    {
        GPBUtil::checkBool($var);
        $this->is_non_linear_format_io = $var;

        return $this;
    }

}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelQueuePolicy;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:enum:: TimeoutAction
 *&#64;&#64;
 *&#64;&#64;     The action applied to timed-out requests.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.ModelQueuePolicy.TimeoutAction</code>
 */
class TimeoutAction
{
    /**
     *&#64;&#64;    .. cpp:enumerator:: Action::REJECT = 0
     *&#64;&#64;
     *&#64;&#64;       Reject the request and return error message accordingly.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>REJECT = 0;</code>
     */
    const REJECT = 0;
    /**
     *&#64;&#64;    .. cpp:enumerator:: Action::DELAY = 1
     *&#64;&#64;
     *&#64;&#64;       Delay the request until all other requests at the same
     *&#64;&#64;       (or higher) priority levels that have not reached their timeouts
     *&#64;&#64;       are processed. A delayed request will eventually be processed,
     *&#64;&#64;       but may be delayed indefinitely due to newly arriving requests.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>DELAY = 1;</code>
     */
    const DELAY = 1;

    private static $valueToName = [
        self::REJECT => 'REJECT',
        self::DELAY => 'DELAY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(TimeoutAction::class, \Inference\ModelQueuePolicy_TimeoutAction::class);


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\BatchOutput;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:enum:: Kind
 *&#64;&#64;
 *&#64;&#64;     The kind of the batch output.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.BatchOutput.Kind</code>
 */
class Kind
{
    /**
     *&#64;&#64;    .. cpp:enumerator:: Kind::BATCH_SCATTER_WITH_INPUT_SHAPE = 0
     *&#64;&#64;
     *&#64;&#64;       The output should be scattered according to the shape of
     *&#64;&#64;       'source_input'. The dynamic dimension of the output will
     *&#64;&#64;       be set to the value of the same dimension in the input.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_SCATTER_WITH_INPUT_SHAPE = 0;</code>
     */
    const BATCH_SCATTER_WITH_INPUT_SHAPE = 0;

    private static $valueToName = [
        self::BATCH_SCATTER_WITH_INPUT_SHAPE => 'BATCH_SCATTER_WITH_INPUT_SHAPE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Kind::class, \Inference\BatchOutput_Kind::class);


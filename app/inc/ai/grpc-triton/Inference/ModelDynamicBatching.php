<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;.. cpp:var:: message ModelDynamicBatching
 *&#64;&#64;
 *&#64;&#64;   Dynamic batching configuration. These settings control how dynamic
 *&#64;&#64;   batching operates for the model.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelDynamicBatching</code>
 */
class ModelDynamicBatching extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;  .. cpp:var:: int32 preferred_batch_size (repeated)
     *&#64;&#64;
     *&#64;&#64;     Preferred batch sizes for dynamic batching. If a batch of one of
     *&#64;&#64;     these sizes can be formed it will be executed immediately.  If
     *&#64;&#64;     not specified a preferred batch size will be chosen automatically
     *&#64;&#64;     based on model and GPU characteristics.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int32 preferred_batch_size = 1;</code>
     */
    private $preferred_batch_size;
    /**
     *&#64;&#64;  .. cpp:var:: uint64 max_queue_delay_microseconds
     *&#64;&#64;
     *&#64;&#64;     The maximum time, in microseconds, a request will be delayed in
     *&#64;&#64;     the scheduling queue to wait for additional requests for
     *&#64;&#64;     batching. Default is 0.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 max_queue_delay_microseconds = 2;</code>
     */
    protected $max_queue_delay_microseconds = 0;
    /**
     *&#64;&#64;  .. cpp:var:: bool preserve_ordering
     *&#64;&#64;
     *&#64;&#64;     Should the dynamic batcher preserve the ordering of responses to
     *&#64;&#64;     match the order of requests received by the scheduler. Default is
     *&#64;&#64;     false. If true, the responses will be returned in the same order as
     *&#64;&#64;     the order of requests sent to the scheduler. If false, the responses
     *&#64;&#64;     may be returned in arbitrary order. This option is specifically
     *&#64;&#64;     needed when a sequence of related inference requests (i.e. inference
     *&#64;&#64;     requests with the same correlation ID) are sent to the dynamic
     *&#64;&#64;     batcher to ensure that the sequence responses are in the correct
     *&#64;&#64;     order.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool preserve_ordering = 3;</code>
     */
    protected $preserve_ordering = false;
    /**
     *&#64;&#64;  .. cpp:var:: uint64 priority_levels
     *&#64;&#64;
     *&#64;&#64;     The number of priority levels to be enabled for the model,
     *&#64;&#64;     the priority level starts from 1 and 1 is the highest priority.
     *&#64;&#64;     Requests are handled in priority order with all priority 1 requests
     *&#64;&#64;     processed before priority 2, all priority 2 requests processed before
     *&#64;&#64;     priority 3, etc. Requests with the same priority level will be
     *&#64;&#64;     handled in the order that they are received.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 priority_levels = 4;</code>
     */
    protected $priority_levels = 0;
    /**
     *&#64;&#64;  .. cpp:var:: uint64 default_priority_level
     *&#64;&#64;
     *&#64;&#64;     The priority level used for requests that don't specify their
     *&#64;&#64;     priority. The value must be in the range [ 1, 'priority_levels' ].
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 default_priority_level = 5;</code>
     */
    protected $default_priority_level = 0;
    /**
     *&#64;&#64;  .. cpp:var:: ModelQueuePolicy default_queue_policy
     *&#64;&#64;
     *&#64;&#64;     The default queue policy used for requests that don't require
     *&#64;&#64;     priority handling and requests that specify priority levels where
     *&#64;&#64;     there is no specific policy given. If not specified, a policy with
     *&#64;&#64;     default field values will be used.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelQueuePolicy default_queue_policy = 6;</code>
     */
    protected $default_queue_policy = null;
    /**
     *&#64;&#64;  .. cpp:var:: map<uint64, ModelQueuePolicy> priority_queue_policy
     *&#64;&#64;
     *&#64;&#64;     Specify the queue policy for the priority level. The default queue
     *&#64;&#64;     policy will be used if a priority level doesn't specify a queue
     *&#64;&#64;     policy.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>map<uint64, .inference.ModelQueuePolicy> priority_queue_policy = 7;</code>
     */
    private $priority_queue_policy;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $preferred_batch_size
     *          &#64;&#64;  .. cpp:var:: int32 preferred_batch_size (repeated)
     *          &#64;&#64;
     *          &#64;&#64;     Preferred batch sizes for dynamic batching. If a batch of one of
     *          &#64;&#64;     these sizes can be formed it will be executed immediately.  If
     *          &#64;&#64;     not specified a preferred batch size will be chosen automatically
     *          &#64;&#64;     based on model and GPU characteristics.
     *          &#64;&#64;
     *     @type int|string $max_queue_delay_microseconds
     *          &#64;&#64;  .. cpp:var:: uint64 max_queue_delay_microseconds
     *          &#64;&#64;
     *          &#64;&#64;     The maximum time, in microseconds, a request will be delayed in
     *          &#64;&#64;     the scheduling queue to wait for additional requests for
     *          &#64;&#64;     batching. Default is 0.
     *          &#64;&#64;
     *     @type bool $preserve_ordering
     *          &#64;&#64;  .. cpp:var:: bool preserve_ordering
     *          &#64;&#64;
     *          &#64;&#64;     Should the dynamic batcher preserve the ordering of responses to
     *          &#64;&#64;     match the order of requests received by the scheduler. Default is
     *          &#64;&#64;     false. If true, the responses will be returned in the same order as
     *          &#64;&#64;     the order of requests sent to the scheduler. If false, the responses
     *          &#64;&#64;     may be returned in arbitrary order. This option is specifically
     *          &#64;&#64;     needed when a sequence of related inference requests (i.e. inference
     *          &#64;&#64;     requests with the same correlation ID) are sent to the dynamic
     *          &#64;&#64;     batcher to ensure that the sequence responses are in the correct
     *          &#64;&#64;     order.
     *          &#64;&#64;
     *     @type int|string $priority_levels
     *          &#64;&#64;  .. cpp:var:: uint64 priority_levels
     *          &#64;&#64;
     *          &#64;&#64;     The number of priority levels to be enabled for the model,
     *          &#64;&#64;     the priority level starts from 1 and 1 is the highest priority.
     *          &#64;&#64;     Requests are handled in priority order with all priority 1 requests
     *          &#64;&#64;     processed before priority 2, all priority 2 requests processed before
     *          &#64;&#64;     priority 3, etc. Requests with the same priority level will be
     *          &#64;&#64;     handled in the order that they are received.
     *          &#64;&#64;
     *     @type int|string $default_priority_level
     *          &#64;&#64;  .. cpp:var:: uint64 default_priority_level
     *          &#64;&#64;
     *          &#64;&#64;     The priority level used for requests that don't specify their
     *          &#64;&#64;     priority. The value must be in the range [ 1, 'priority_levels' ].
     *          &#64;&#64;
     *     @type \Inference\ModelQueuePolicy $default_queue_policy
     *          &#64;&#64;  .. cpp:var:: ModelQueuePolicy default_queue_policy
     *          &#64;&#64;
     *          &#64;&#64;     The default queue policy used for requests that don't require
     *          &#64;&#64;     priority handling and requests that specify priority levels where
     *          &#64;&#64;     there is no specific policy given. If not specified, a policy with
     *          &#64;&#64;     default field values will be used.
     *          &#64;&#64;
     *     @type array|\Google\Protobuf\Internal\MapField $priority_queue_policy
     *          &#64;&#64;  .. cpp:var:: map<uint64, ModelQueuePolicy> priority_queue_policy
     *          &#64;&#64;
     *          &#64;&#64;     Specify the queue policy for the priority level. The default queue
     *          &#64;&#64;     policy will be used if a priority level doesn't specify a queue
     *          &#64;&#64;     policy.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;  .. cpp:var:: int32 preferred_batch_size (repeated)
     *&#64;&#64;
     *&#64;&#64;     Preferred batch sizes for dynamic batching. If a batch of one of
     *&#64;&#64;     these sizes can be formed it will be executed immediately.  If
     *&#64;&#64;     not specified a preferred batch size will be chosen automatically
     *&#64;&#64;     based on model and GPU characteristics.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int32 preferred_batch_size = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getPreferredBatchSize()
    {
        return $this->preferred_batch_size;
    }

    /**
     *&#64;&#64;  .. cpp:var:: int32 preferred_batch_size (repeated)
     *&#64;&#64;
     *&#64;&#64;     Preferred batch sizes for dynamic batching. If a batch of one of
     *&#64;&#64;     these sizes can be formed it will be executed immediately.  If
     *&#64;&#64;     not specified a preferred batch size will be chosen automatically
     *&#64;&#64;     based on model and GPU characteristics.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int32 preferred_batch_size = 1;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setPreferredBatchSize($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->preferred_batch_size = $arr;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint64 max_queue_delay_microseconds
     *&#64;&#64;
     *&#64;&#64;     The maximum time, in microseconds, a request will be delayed in
     *&#64;&#64;     the scheduling queue to wait for additional requests for
     *&#64;&#64;     batching. Default is 0.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 max_queue_delay_microseconds = 2;</code>
     * @return int|string
     */
    public function getMaxQueueDelayMicroseconds()
    {
        return $this->max_queue_delay_microseconds;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint64 max_queue_delay_microseconds
     *&#64;&#64;
     *&#64;&#64;     The maximum time, in microseconds, a request will be delayed in
     *&#64;&#64;     the scheduling queue to wait for additional requests for
     *&#64;&#64;     batching. Default is 0.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 max_queue_delay_microseconds = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxQueueDelayMicroseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_queue_delay_microseconds = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool preserve_ordering
     *&#64;&#64;
     *&#64;&#64;     Should the dynamic batcher preserve the ordering of responses to
     *&#64;&#64;     match the order of requests received by the scheduler. Default is
     *&#64;&#64;     false. If true, the responses will be returned in the same order as
     *&#64;&#64;     the order of requests sent to the scheduler. If false, the responses
     *&#64;&#64;     may be returned in arbitrary order. This option is specifically
     *&#64;&#64;     needed when a sequence of related inference requests (i.e. inference
     *&#64;&#64;     requests with the same correlation ID) are sent to the dynamic
     *&#64;&#64;     batcher to ensure that the sequence responses are in the correct
     *&#64;&#64;     order.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool preserve_ordering = 3;</code>
     * @return bool
     */
    public function getPreserveOrdering()
    {
        return $this->preserve_ordering;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool preserve_ordering
     *&#64;&#64;
     *&#64;&#64;     Should the dynamic batcher preserve the ordering of responses to
     *&#64;&#64;     match the order of requests received by the scheduler. Default is
     *&#64;&#64;     false. If true, the responses will be returned in the same order as
     *&#64;&#64;     the order of requests sent to the scheduler. If false, the responses
     *&#64;&#64;     may be returned in arbitrary order. This option is specifically
     *&#64;&#64;     needed when a sequence of related inference requests (i.e. inference
     *&#64;&#64;     requests with the same correlation ID) are sent to the dynamic
     *&#64;&#64;     batcher to ensure that the sequence responses are in the correct
     *&#64;&#64;     order.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool preserve_ordering = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setPreserveOrdering($var)
    {
        GPBUtil::checkBool($var);
        $this->preserve_ordering = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint64 priority_levels
     *&#64;&#64;
     *&#64;&#64;     The number of priority levels to be enabled for the model,
     *&#64;&#64;     the priority level starts from 1 and 1 is the highest priority.
     *&#64;&#64;     Requests are handled in priority order with all priority 1 requests
     *&#64;&#64;     processed before priority 2, all priority 2 requests processed before
     *&#64;&#64;     priority 3, etc. Requests with the same priority level will be
     *&#64;&#64;     handled in the order that they are received.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 priority_levels = 4;</code>
     * @return int|string
     */
    public function getPriorityLevels()
    {
        return $this->priority_levels;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint64 priority_levels
     *&#64;&#64;
     *&#64;&#64;     The number of priority levels to be enabled for the model,
     *&#64;&#64;     the priority level starts from 1 and 1 is the highest priority.
     *&#64;&#64;     Requests are handled in priority order with all priority 1 requests
     *&#64;&#64;     processed before priority 2, all priority 2 requests processed before
     *&#64;&#64;     priority 3, etc. Requests with the same priority level will be
     *&#64;&#64;     handled in the order that they are received.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 priority_levels = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPriorityLevels($var)
    {
        GPBUtil::checkUint64($var);
        $this->priority_levels = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint64 default_priority_level
     *&#64;&#64;
     *&#64;&#64;     The priority level used for requests that don't specify their
     *&#64;&#64;     priority. The value must be in the range [ 1, 'priority_levels' ].
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 default_priority_level = 5;</code>
     * @return int|string
     */
    public function getDefaultPriorityLevel()
    {
        return $this->default_priority_level;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint64 default_priority_level
     *&#64;&#64;
     *&#64;&#64;     The priority level used for requests that don't specify their
     *&#64;&#64;     priority. The value must be in the range [ 1, 'priority_levels' ].
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 default_priority_level = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDefaultPriorityLevel($var)
    {
        GPBUtil::checkUint64($var);
        $this->default_priority_level = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: ModelQueuePolicy default_queue_policy
     *&#64;&#64;
     *&#64;&#64;     The default queue policy used for requests that don't require
     *&#64;&#64;     priority handling and requests that specify priority levels where
     *&#64;&#64;     there is no specific policy given. If not specified, a policy with
     *&#64;&#64;     default field values will be used.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelQueuePolicy default_queue_policy = 6;</code>
     * @return \Inference\ModelQueuePolicy
     */
    public function getDefaultQueuePolicy()
    {
        return $this->default_queue_policy;
    }

    /**
     *&#64;&#64;  .. cpp:var:: ModelQueuePolicy default_queue_policy
     *&#64;&#64;
     *&#64;&#64;     The default queue policy used for requests that don't require
     *&#64;&#64;     priority handling and requests that specify priority levels where
     *&#64;&#64;     there is no specific policy given. If not specified, a policy with
     *&#64;&#64;     default field values will be used.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelQueuePolicy default_queue_policy = 6;</code>
     * @param \Inference\ModelQueuePolicy $var
     * @return $this
     */
    public function setDefaultQueuePolicy($var)
    {
        GPBUtil::checkMessage($var, \Inference\ModelQueuePolicy::class);
        $this->default_queue_policy = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: map<uint64, ModelQueuePolicy> priority_queue_policy
     *&#64;&#64;
     *&#64;&#64;     Specify the queue policy for the priority level. The default queue
     *&#64;&#64;     policy will be used if a priority level doesn't specify a queue
     *&#64;&#64;     policy.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>map<uint64, .inference.ModelQueuePolicy> priority_queue_policy = 7;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getPriorityQueuePolicy()
    {
        return $this->priority_queue_policy;
    }

    /**
     *&#64;&#64;  .. cpp:var:: map<uint64, ModelQueuePolicy> priority_queue_policy
     *&#64;&#64;
     *&#64;&#64;     Specify the queue policy for the priority level. The default queue
     *&#64;&#64;     policy will be used if a priority level doesn't specify a queue
     *&#64;&#64;     policy.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>map<uint64, .inference.ModelQueuePolicy> priority_queue_policy = 7;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setPriorityQueuePolicy($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT64, \Google\Protobuf\Internal\GPBType::MESSAGE, \Inference\ModelQueuePolicy::class);
        $this->priority_queue_policy = $arr;

        return $this;
    }

}


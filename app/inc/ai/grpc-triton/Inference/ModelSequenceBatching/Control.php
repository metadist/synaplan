<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelSequenceBatching;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;  .. cpp:var:: message Control
 *&#64;&#64;
 *&#64;&#64;     A control is a signal that the sequence batcher uses to
 *&#64;&#64;     communicate with a backend.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelSequenceBatching.Control</code>
 */
class Control extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;    .. cpp:var:: Kind kind
     *&#64;&#64;
     *&#64;&#64;       The kind of this control.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelSequenceBatching.Control.Kind kind = 1;</code>
     */
    protected $kind = 0;
    /**
     *&#64;&#64;    .. cpp:var:: int32 int32_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in an int32 tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'int32_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int32 int32_false_true = 2;</code>
     */
    private $int32_false_true;
    /**
     *&#64;&#64;    .. cpp:var:: float fp32_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in a fp32 tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'fp32_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated float fp32_false_true = 3;</code>
     */
    private $fp32_false_true;
    /**
     *&#64;&#64;    .. cpp:var:: bool bool_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in a bool tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'bool_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated bool bool_false_true = 5;</code>
     */
    private $bool_false_true;
    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The control's datatype.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 4;</code>
     */
    protected $data_type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $kind
     *          &#64;&#64;    .. cpp:var:: Kind kind
     *          &#64;&#64;
     *          &#64;&#64;       The kind of this control.
     *          &#64;&#64;
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $int32_false_true
     *          &#64;&#64;    .. cpp:var:: int32 int32_false_true (repeated)
     *          &#64;&#64;
     *          &#64;&#64;       The control's true and false setting is indicated by setting
     *          &#64;&#64;       a value in an int32 tensor. The tensor must be a
     *          &#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *          &#64;&#64;       the request. 'int32_false_true' must have two entries: the
     *          &#64;&#64;       first the false value and the second the true value.
     *          &#64;&#64;
     *     @type float[]|\Google\Protobuf\Internal\RepeatedField $fp32_false_true
     *          &#64;&#64;    .. cpp:var:: float fp32_false_true (repeated)
     *          &#64;&#64;
     *          &#64;&#64;       The control's true and false setting is indicated by setting
     *          &#64;&#64;       a value in a fp32 tensor. The tensor must be a
     *          &#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *          &#64;&#64;       the request. 'fp32_false_true' must have two entries: the
     *          &#64;&#64;       first the false value and the second the true value.
     *          &#64;&#64;
     *     @type bool[]|\Google\Protobuf\Internal\RepeatedField $bool_false_true
     *          &#64;&#64;    .. cpp:var:: bool bool_false_true (repeated)
     *          &#64;&#64;
     *          &#64;&#64;       The control's true and false setting is indicated by setting
     *          &#64;&#64;       a value in a bool tensor. The tensor must be a
     *          &#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *          &#64;&#64;       the request. 'bool_false_true' must have two entries: the
     *          &#64;&#64;       first the false value and the second the true value.
     *          &#64;&#64;
     *     @type int $data_type
     *          &#64;&#64;    .. cpp:var:: DataType data_type
     *          &#64;&#64;
     *          &#64;&#64;       The control's datatype.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;    .. cpp:var:: Kind kind
     *&#64;&#64;
     *&#64;&#64;       The kind of this control.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelSequenceBatching.Control.Kind kind = 1;</code>
     * @return int
     */
    public function getKind()
    {
        return $this->kind;
    }

    /**
     *&#64;&#64;    .. cpp:var:: Kind kind
     *&#64;&#64;
     *&#64;&#64;       The kind of this control.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelSequenceBatching.Control.Kind kind = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setKind($var)
    {
        GPBUtil::checkEnum($var, \Inference\ModelSequenceBatching_Control_Kind::class);
        $this->kind = $var;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: int32 int32_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in an int32 tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'int32_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int32 int32_false_true = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInt32FalseTrue()
    {
        return $this->int32_false_true;
    }

    /**
     *&#64;&#64;    .. cpp:var:: int32 int32_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in an int32 tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'int32_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int32 int32_false_true = 2;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInt32FalseTrue($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->int32_false_true = $arr;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: float fp32_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in a fp32 tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'fp32_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated float fp32_false_true = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFp32FalseTrue()
    {
        return $this->fp32_false_true;
    }

    /**
     *&#64;&#64;    .. cpp:var:: float fp32_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in a fp32 tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'fp32_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated float fp32_false_true = 3;</code>
     * @param float[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFp32FalseTrue($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::FLOAT);
        $this->fp32_false_true = $arr;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: bool bool_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in a bool tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'bool_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated bool bool_false_true = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getBoolFalseTrue()
    {
        return $this->bool_false_true;
    }

    /**
     *&#64;&#64;    .. cpp:var:: bool bool_false_true (repeated)
     *&#64;&#64;
     *&#64;&#64;       The control's true and false setting is indicated by setting
     *&#64;&#64;       a value in a bool tensor. The tensor must be a
     *&#64;&#64;       1-dimensional tensor with size equal to the batch size of
     *&#64;&#64;       the request. 'bool_false_true' must have two entries: the
     *&#64;&#64;       first the false value and the second the true value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated bool bool_false_true = 5;</code>
     * @param bool[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setBoolFalseTrue($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BOOL);
        $this->bool_false_true = $arr;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The control's datatype.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 4;</code>
     * @return int
     */
    public function getDataType()
    {
        return $this->data_type;
    }

    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The control's datatype.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setDataType($var)
    {
        GPBUtil::checkEnum($var, \Inference\DataType::class);
        $this->data_type = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Control::class, \Inference\ModelSequenceBatching_Control::class);


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelSequenceBatching;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;  .. cpp:var:: message StrategyDirect
 *&#64;&#64;
 *&#64;&#64;     The sequence batcher uses a specific, unique batch
 *&#64;&#64;     slot for each sequence. All inference requests in a
 *&#64;&#64;     sequence are directed to the same batch slot in the same
 *&#64;&#64;     model instance over the lifetime of the sequence. This
 *&#64;&#64;     is the default strategy.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelSequenceBatching.StrategyDirect</code>
 */
class StrategyDirect extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;    .. cpp:var:: uint64 max_queue_delay_microseconds
     *&#64;&#64;
     *&#64;&#64;       The maximum time, in microseconds, a candidate request
     *&#64;&#64;       will be delayed in the sequence batch scheduling queue to
     *&#64;&#64;       wait for additional requests for batching. Default is 0.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 max_queue_delay_microseconds = 1;</code>
     */
    protected $max_queue_delay_microseconds = 0;
    /**
     *&#64;&#64;    .. cpp:var:: float minimum_slot_utilization
     *&#64;&#64;
     *&#64;&#64;       The minimum slot utilization that must be satisfied to
     *&#64;&#64;       execute the batch before 'max_queue_delay_microseconds' expires.
     *&#64;&#64;       For example, a value of 0.5 indicates that the batch should be
     *&#64;&#64;       executed as soon as 50% or more of the slots are ready even if
     *&#64;&#64;       the 'max_queue_delay_microseconds' timeout has not expired.
     *&#64;&#64;       The default is 0.0, indicating that a batch will be executed
     *&#64;&#64;       before 'max_queue_delay_microseconds' timeout expires if at least
     *&#64;&#64;       one batch slot is ready. 'max_queue_delay_microseconds' will be
     *&#64;&#64;       ignored unless minimum_slot_utilization is set to a non-zero
     *&#64;&#64;       value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>float minimum_slot_utilization = 2;</code>
     */
    protected $minimum_slot_utilization = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $max_queue_delay_microseconds
     *          &#64;&#64;    .. cpp:var:: uint64 max_queue_delay_microseconds
     *          &#64;&#64;
     *          &#64;&#64;       The maximum time, in microseconds, a candidate request
     *          &#64;&#64;       will be delayed in the sequence batch scheduling queue to
     *          &#64;&#64;       wait for additional requests for batching. Default is 0.
     *          &#64;&#64;
     *     @type float $minimum_slot_utilization
     *          &#64;&#64;    .. cpp:var:: float minimum_slot_utilization
     *          &#64;&#64;
     *          &#64;&#64;       The minimum slot utilization that must be satisfied to
     *          &#64;&#64;       execute the batch before 'max_queue_delay_microseconds' expires.
     *          &#64;&#64;       For example, a value of 0.5 indicates that the batch should be
     *          &#64;&#64;       executed as soon as 50% or more of the slots are ready even if
     *          &#64;&#64;       the 'max_queue_delay_microseconds' timeout has not expired.
     *          &#64;&#64;       The default is 0.0, indicating that a batch will be executed
     *          &#64;&#64;       before 'max_queue_delay_microseconds' timeout expires if at least
     *          &#64;&#64;       one batch slot is ready. 'max_queue_delay_microseconds' will be
     *          &#64;&#64;       ignored unless minimum_slot_utilization is set to a non-zero
     *          &#64;&#64;       value.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;    .. cpp:var:: uint64 max_queue_delay_microseconds
     *&#64;&#64;
     *&#64;&#64;       The maximum time, in microseconds, a candidate request
     *&#64;&#64;       will be delayed in the sequence batch scheduling queue to
     *&#64;&#64;       wait for additional requests for batching. Default is 0.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 max_queue_delay_microseconds = 1;</code>
     * @return int|string
     */
    public function getMaxQueueDelayMicroseconds()
    {
        return $this->max_queue_delay_microseconds;
    }

    /**
     *&#64;&#64;    .. cpp:var:: uint64 max_queue_delay_microseconds
     *&#64;&#64;
     *&#64;&#64;       The maximum time, in microseconds, a candidate request
     *&#64;&#64;       will be delayed in the sequence batch scheduling queue to
     *&#64;&#64;       wait for additional requests for batching. Default is 0.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 max_queue_delay_microseconds = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxQueueDelayMicroseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_queue_delay_microseconds = $var;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: float minimum_slot_utilization
     *&#64;&#64;
     *&#64;&#64;       The minimum slot utilization that must be satisfied to
     *&#64;&#64;       execute the batch before 'max_queue_delay_microseconds' expires.
     *&#64;&#64;       For example, a value of 0.5 indicates that the batch should be
     *&#64;&#64;       executed as soon as 50% or more of the slots are ready even if
     *&#64;&#64;       the 'max_queue_delay_microseconds' timeout has not expired.
     *&#64;&#64;       The default is 0.0, indicating that a batch will be executed
     *&#64;&#64;       before 'max_queue_delay_microseconds' timeout expires if at least
     *&#64;&#64;       one batch slot is ready. 'max_queue_delay_microseconds' will be
     *&#64;&#64;       ignored unless minimum_slot_utilization is set to a non-zero
     *&#64;&#64;       value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>float minimum_slot_utilization = 2;</code>
     * @return float
     */
    public function getMinimumSlotUtilization()
    {
        return $this->minimum_slot_utilization;
    }

    /**
     *&#64;&#64;    .. cpp:var:: float minimum_slot_utilization
     *&#64;&#64;
     *&#64;&#64;       The minimum slot utilization that must be satisfied to
     *&#64;&#64;       execute the batch before 'max_queue_delay_microseconds' expires.
     *&#64;&#64;       For example, a value of 0.5 indicates that the batch should be
     *&#64;&#64;       executed as soon as 50% or more of the slots are ready even if
     *&#64;&#64;       the 'max_queue_delay_microseconds' timeout has not expired.
     *&#64;&#64;       The default is 0.0, indicating that a batch will be executed
     *&#64;&#64;       before 'max_queue_delay_microseconds' timeout expires if at least
     *&#64;&#64;       one batch slot is ready. 'max_queue_delay_microseconds' will be
     *&#64;&#64;       ignored unless minimum_slot_utilization is set to a non-zero
     *&#64;&#64;       value.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>float minimum_slot_utilization = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setMinimumSlotUtilization($var)
    {
        GPBUtil::checkFloat($var);
        $this->minimum_slot_utilization = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(StrategyDirect::class, \Inference\ModelSequenceBatching_StrategyDirect::class);


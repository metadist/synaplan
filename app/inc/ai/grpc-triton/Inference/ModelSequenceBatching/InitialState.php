<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelSequenceBatching;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:var:: message InitialState
 *&#64;&#64;
 *&#64;&#64;     Settings used to initialize data for implicit state.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelSequenceBatching.InitialState</code>
 */
class InitialState extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;      .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;         The data-type of the state.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 1;</code>
     */
    protected $data_type = 0;
    /**
     *&#64;&#64;      .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;         The shape of the state tensor, not including the batch
     *&#64;&#64;         dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 2;</code>
     */
    private $dims;
    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the state initialization.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 5;</code>
     */
    protected $name = '';
    protected $state_data;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $data_type
     *          &#64;&#64;      .. cpp:var:: DataType data_type
     *          &#64;&#64;
     *          &#64;&#64;         The data-type of the state.
     *          &#64;&#64;
     *     @type int[]|string[]|\Google\Protobuf\Internal\RepeatedField $dims
     *          &#64;&#64;      .. cpp:var:: int64 dims (repeated)
     *          &#64;&#64;
     *          &#64;&#64;         The shape of the state tensor, not including the batch
     *          &#64;&#64;         dimension.
     *          &#64;&#64;
     *     @type bool $zero_data
     *          &#64;&#64;
     *          &#64;&#64;      .. cpp:var:: bool zero_data
     *          &#64;&#64;
     *          &#64;&#64;         The identifier for using zeros as initial state data.
     *          &#64;&#64;         Note that the value of 'zero_data' will not be checked,
     *          &#64;&#64;         instead, zero data will be used as long as the field is set.
     *          &#64;&#64;
     *     @type string $data_file
     *          &#64;&#64;      .. cpp:var:: string data_file
     *          &#64;&#64;
     *          &#64;&#64;         The file whose content will be used as the initial data for
     *          &#64;&#64;         the state in row-major order. The file must be provided in
     *          &#64;&#64;         sub-directory 'initial_state' under the model directory.
     *          &#64;&#64;
     *     @type string $name
     *          &#64;&#64;  .. cpp:var:: string name
     *          &#64;&#64;
     *          &#64;&#64;     The name of the state initialization.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;      .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;         The data-type of the state.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 1;</code>
     * @return int
     */
    public function getDataType()
    {
        return $this->data_type;
    }

    /**
     *&#64;&#64;      .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;         The data-type of the state.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setDataType($var)
    {
        GPBUtil::checkEnum($var, \Inference\DataType::class);
        $this->data_type = $var;

        return $this;
    }

    /**
     *&#64;&#64;      .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;         The shape of the state tensor, not including the batch
     *&#64;&#64;         dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDims()
    {
        return $this->dims;
    }

    /**
     *&#64;&#64;      .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;         The shape of the state tensor, not including the batch
     *&#64;&#64;         dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 2;</code>
     * @param int[]|string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDims($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->dims = $arr;

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;      .. cpp:var:: bool zero_data
     *&#64;&#64;
     *&#64;&#64;         The identifier for using zeros as initial state data.
     *&#64;&#64;         Note that the value of 'zero_data' will not be checked,
     *&#64;&#64;         instead, zero data will be used as long as the field is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool zero_data = 3;</code>
     * @return bool
     */
    public function getZeroData()
    {
        return $this->readOneof(3);
    }

    /**
     *&#64;&#64;
     *&#64;&#64;      .. cpp:var:: bool zero_data
     *&#64;&#64;
     *&#64;&#64;         The identifier for using zeros as initial state data.
     *&#64;&#64;         Note that the value of 'zero_data' will not be checked,
     *&#64;&#64;         instead, zero data will be used as long as the field is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool zero_data = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setZeroData($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     *&#64;&#64;      .. cpp:var:: string data_file
     *&#64;&#64;
     *&#64;&#64;         The file whose content will be used as the initial data for
     *&#64;&#64;         the state in row-major order. The file must be provided in
     *&#64;&#64;         sub-directory 'initial_state' under the model directory.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string data_file = 4;</code>
     * @return string
     */
    public function getDataFile()
    {
        return $this->readOneof(4);
    }

    /**
     *&#64;&#64;      .. cpp:var:: string data_file
     *&#64;&#64;
     *&#64;&#64;         The file whose content will be used as the initial data for
     *&#64;&#64;         the state in row-major order. The file must be provided in
     *&#64;&#64;         sub-directory 'initial_state' under the model directory.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string data_file = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDataFile($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the state initialization.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 5;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the state initialization.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getStateData()
    {
        return $this->whichOneof("state_data");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(InitialState::class, \Inference\ModelSequenceBatching_InitialState::class);


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelSequenceBatching\Control;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;    .. cpp:enum:: Kind
 *&#64;&#64;
 *&#64;&#64;       The kind of the control.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.ModelSequenceBatching.Control.Kind</code>
 */
class Kind
{
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::CONTROL_SEQUENCE_START = 0
     *&#64;&#64;
     *&#64;&#64;         A new sequence is/is-not starting. If true a sequence is
     *&#64;&#64;         starting, if false a sequence is continuing. Must
     *&#64;&#64;         specify either int32_false_true, fp32_false_true or
     *&#64;&#64;         bool_false_true for this control. This control is optional.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>CONTROL_SEQUENCE_START = 0;</code>
     */
    const CONTROL_SEQUENCE_START = 0;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::CONTROL_SEQUENCE_READY = 1
     *&#64;&#64;
     *&#64;&#64;         A sequence is/is-not ready for inference. If true the
     *&#64;&#64;         input tensor data is valid and should be used. If false
     *&#64;&#64;         the input tensor data is invalid and inferencing should
     *&#64;&#64;         be "skipped". Must specify either int32_false_true,
     *&#64;&#64;         fp32_false_true or bool_false_true for this control. This
     *&#64;&#64;         control is optional.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>CONTROL_SEQUENCE_READY = 1;</code>
     */
    const CONTROL_SEQUENCE_READY = 1;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::CONTROL_SEQUENCE_END = 2
     *&#64;&#64;
     *&#64;&#64;         A sequence is/is-not ending. If true a sequence is
     *&#64;&#64;         ending, if false a sequence is continuing. Must specify
     *&#64;&#64;         either int32_false_true, fp32_false_true or bool_false_true
     *&#64;&#64;         for this control. This control is optional.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>CONTROL_SEQUENCE_END = 2;</code>
     */
    const CONTROL_SEQUENCE_END = 2;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::CONTROL_SEQUENCE_CORRID = 3
     *&#64;&#64;
     *&#64;&#64;         The correlation ID of the sequence. The correlation ID
     *&#64;&#64;         is an uint64_t value that is communicated in whole or
     *&#64;&#64;         in part by the tensor. The tensor's datatype must be
     *&#64;&#64;         specified by data_type and must be TYPE_UINT64, TYPE_INT64,
     *&#64;&#64;         TYPE_UINT32 or TYPE_INT32. If a 32-bit datatype is specified
     *&#64;&#64;         the correlation ID will be truncated to the low-order 32
     *&#64;&#64;         bits. This control is optional.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>CONTROL_SEQUENCE_CORRID = 3;</code>
     */
    const CONTROL_SEQUENCE_CORRID = 3;

    private static $valueToName = [
        self::CONTROL_SEQUENCE_START => 'CONTROL_SEQUENCE_START',
        self::CONTROL_SEQUENCE_READY => 'CONTROL_SEQUENCE_READY',
        self::CONTROL_SEQUENCE_END => 'CONTROL_SEQUENCE_END',
        self::CONTROL_SEQUENCE_CORRID => 'CONTROL_SEQUENCE_CORRID',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Kind::class, \Inference\ModelSequenceBatching_Control_Kind::class);


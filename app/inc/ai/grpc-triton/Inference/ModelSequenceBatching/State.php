<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelSequenceBatching;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;  .. cpp:var:: message State
 *&#64;&#64;
 *&#64;&#64;     An input / output pair of tensors that carry state for the sequence.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelSequenceBatching.State</code>
 */
class State extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;    .. cpp:var:: string input_name
     *&#64;&#64;
     *&#64;&#64;       The name of the model state input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string input_name = 1;</code>
     */
    protected $input_name = '';
    /**
     *&#64;&#64;    .. cpp:var:: string output_name
     *&#64;&#64;
     *&#64;&#64;       The name of the model state output.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string output_name = 2;</code>
     */
    protected $output_name = '';
    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The data-type of the state.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 3;</code>
     */
    protected $data_type = 0;
    /**
     *&#64;&#64;    .. cpp:var:: int64 dim (repeated)
     *&#64;&#64;
     *&#64;&#64;       The dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 4;</code>
     */
    private $dims;
    /**
     *&#64;&#64;  .. cpp:var:: InitialState initial_state (repeated)
     *&#64;&#64;
     *&#64;&#64;     The optional field to specify the initial state for the model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated .inference.ModelSequenceBatching.InitialState initial_state = 5;</code>
     */
    private $initial_state;
    /**
     *&#64;&#64;  .. cpp:var:: bool use_same_buffer_for_input_output
     *&#64;&#64;
     *&#64;&#64;     The optional field to use a single buffer for both input and output
     *&#64;&#64;     state. Without this option, Triton allocates separate buffers
     *&#64;&#64;     for input and output state
     *&#64;&#64;     which can be problematic if the state size is
     *&#64;&#64;     large. This option reduces the memory usage by allocating a single
     *&#64;&#64;     buffer. Enabling this option is recommended whenever
     *&#64;&#64;     the input state is processed before the output state is written.
     *&#64;&#64;     When enabled the state
     *&#64;&#64;     will always be updated independent of whether
     *&#64;&#64;     TRITONBACKEND_StateUpdate is called
     *&#64;&#64;     (however TRITONBACKEND_StateUpdate should still be called for
     *&#64;&#64;     completeness).
     *&#64;&#64;
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool use_same_buffer_for_input_output = 6;</code>
     */
    protected $use_same_buffer_for_input_output = false;
    /**
     *&#64;&#64;  .. cpp:var:: bool use_growable_memory
     *&#64;&#64;
     *&#64;&#64;     The optional field to enable an implicit state buffer to grow
     *&#64;&#64;     without reallocating or copying existing memory.
     *&#64;&#64;     Additional memory will be appended to the end of the buffer and
     *&#64;&#64;     existing data will be preserved.
     *&#64;&#64;     This option is only available for CUDA memory and requires enabling
     *&#64;&#64;     use_same_buffer_for_input_output. When using this option,
     *&#64;&#64;     StateBuffer call will always return CUDA memory even if CPU memory
     *&#64;&#64;     is requested.
     *&#64;&#64;
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool use_growable_memory = 7;</code>
     */
    protected $use_growable_memory = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $input_name
     *          &#64;&#64;    .. cpp:var:: string input_name
     *          &#64;&#64;
     *          &#64;&#64;       The name of the model state input.
     *          &#64;&#64;
     *     @type string $output_name
     *          &#64;&#64;    .. cpp:var:: string output_name
     *          &#64;&#64;
     *          &#64;&#64;       The name of the model state output.
     *          &#64;&#64;
     *     @type int $data_type
     *          &#64;&#64;    .. cpp:var:: DataType data_type
     *          &#64;&#64;
     *          &#64;&#64;       The data-type of the state.
     *          &#64;&#64;
     *     @type int[]|string[]|\Google\Protobuf\Internal\RepeatedField $dims
     *          &#64;&#64;    .. cpp:var:: int64 dim (repeated)
     *          &#64;&#64;
     *          &#64;&#64;       The dimension.
     *          &#64;&#64;
     *     @type \Inference\ModelSequenceBatching\InitialState[]|\Google\Protobuf\Internal\RepeatedField $initial_state
     *          &#64;&#64;  .. cpp:var:: InitialState initial_state (repeated)
     *          &#64;&#64;
     *          &#64;&#64;     The optional field to specify the initial state for the model.
     *          &#64;&#64;
     *     @type bool $use_same_buffer_for_input_output
     *          &#64;&#64;  .. cpp:var:: bool use_same_buffer_for_input_output
     *          &#64;&#64;
     *          &#64;&#64;     The optional field to use a single buffer for both input and output
     *          &#64;&#64;     state. Without this option, Triton allocates separate buffers
     *          &#64;&#64;     for input and output state
     *          &#64;&#64;     which can be problematic if the state size is
     *          &#64;&#64;     large. This option reduces the memory usage by allocating a single
     *          &#64;&#64;     buffer. Enabling this option is recommended whenever
     *          &#64;&#64;     the input state is processed before the output state is written.
     *          &#64;&#64;     When enabled the state
     *          &#64;&#64;     will always be updated independent of whether
     *          &#64;&#64;     TRITONBACKEND_StateUpdate is called
     *          &#64;&#64;     (however TRITONBACKEND_StateUpdate should still be called for
     *          &#64;&#64;     completeness).
     *          &#64;&#64;
     *          &#64;&#64;     The default value is false.
     *          &#64;&#64;
     *     @type bool $use_growable_memory
     *          &#64;&#64;  .. cpp:var:: bool use_growable_memory
     *          &#64;&#64;
     *          &#64;&#64;     The optional field to enable an implicit state buffer to grow
     *          &#64;&#64;     without reallocating or copying existing memory.
     *          &#64;&#64;     Additional memory will be appended to the end of the buffer and
     *          &#64;&#64;     existing data will be preserved.
     *          &#64;&#64;     This option is only available for CUDA memory and requires enabling
     *          &#64;&#64;     use_same_buffer_for_input_output. When using this option,
     *          &#64;&#64;     StateBuffer call will always return CUDA memory even if CPU memory
     *          &#64;&#64;     is requested.
     *          &#64;&#64;
     *          &#64;&#64;     The default value is false.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;    .. cpp:var:: string input_name
     *&#64;&#64;
     *&#64;&#64;       The name of the model state input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string input_name = 1;</code>
     * @return string
     */
    public function getInputName()
    {
        return $this->input_name;
    }

    /**
     *&#64;&#64;    .. cpp:var:: string input_name
     *&#64;&#64;
     *&#64;&#64;       The name of the model state input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string input_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setInputName($var)
    {
        GPBUtil::checkString($var, True);
        $this->input_name = $var;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: string output_name
     *&#64;&#64;
     *&#64;&#64;       The name of the model state output.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string output_name = 2;</code>
     * @return string
     */
    public function getOutputName()
    {
        return $this->output_name;
    }

    /**
     *&#64;&#64;    .. cpp:var:: string output_name
     *&#64;&#64;
     *&#64;&#64;       The name of the model state output.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string output_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setOutputName($var)
    {
        GPBUtil::checkString($var, True);
        $this->output_name = $var;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The data-type of the state.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 3;</code>
     * @return int
     */
    public function getDataType()
    {
        return $this->data_type;
    }

    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The data-type of the state.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setDataType($var)
    {
        GPBUtil::checkEnum($var, \Inference\DataType::class);
        $this->data_type = $var;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: int64 dim (repeated)
     *&#64;&#64;
     *&#64;&#64;       The dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDims()
    {
        return $this->dims;
    }

    /**
     *&#64;&#64;    .. cpp:var:: int64 dim (repeated)
     *&#64;&#64;
     *&#64;&#64;       The dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 4;</code>
     * @param int[]|string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDims($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->dims = $arr;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: InitialState initial_state (repeated)
     *&#64;&#64;
     *&#64;&#64;     The optional field to specify the initial state for the model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated .inference.ModelSequenceBatching.InitialState initial_state = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInitialState()
    {
        return $this->initial_state;
    }

    /**
     *&#64;&#64;  .. cpp:var:: InitialState initial_state (repeated)
     *&#64;&#64;
     *&#64;&#64;     The optional field to specify the initial state for the model.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated .inference.ModelSequenceBatching.InitialState initial_state = 5;</code>
     * @param \Inference\ModelSequenceBatching\InitialState[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInitialState($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Inference\ModelSequenceBatching\InitialState::class);
        $this->initial_state = $arr;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool use_same_buffer_for_input_output
     *&#64;&#64;
     *&#64;&#64;     The optional field to use a single buffer for both input and output
     *&#64;&#64;     state. Without this option, Triton allocates separate buffers
     *&#64;&#64;     for input and output state
     *&#64;&#64;     which can be problematic if the state size is
     *&#64;&#64;     large. This option reduces the memory usage by allocating a single
     *&#64;&#64;     buffer. Enabling this option is recommended whenever
     *&#64;&#64;     the input state is processed before the output state is written.
     *&#64;&#64;     When enabled the state
     *&#64;&#64;     will always be updated independent of whether
     *&#64;&#64;     TRITONBACKEND_StateUpdate is called
     *&#64;&#64;     (however TRITONBACKEND_StateUpdate should still be called for
     *&#64;&#64;     completeness).
     *&#64;&#64;
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool use_same_buffer_for_input_output = 6;</code>
     * @return bool
     */
    public function getUseSameBufferForInputOutput()
    {
        return $this->use_same_buffer_for_input_output;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool use_same_buffer_for_input_output
     *&#64;&#64;
     *&#64;&#64;     The optional field to use a single buffer for both input and output
     *&#64;&#64;     state. Without this option, Triton allocates separate buffers
     *&#64;&#64;     for input and output state
     *&#64;&#64;     which can be problematic if the state size is
     *&#64;&#64;     large. This option reduces the memory usage by allocating a single
     *&#64;&#64;     buffer. Enabling this option is recommended whenever
     *&#64;&#64;     the input state is processed before the output state is written.
     *&#64;&#64;     When enabled the state
     *&#64;&#64;     will always be updated independent of whether
     *&#64;&#64;     TRITONBACKEND_StateUpdate is called
     *&#64;&#64;     (however TRITONBACKEND_StateUpdate should still be called for
     *&#64;&#64;     completeness).
     *&#64;&#64;
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool use_same_buffer_for_input_output = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setUseSameBufferForInputOutput($var)
    {
        GPBUtil::checkBool($var);
        $this->use_same_buffer_for_input_output = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool use_growable_memory
     *&#64;&#64;
     *&#64;&#64;     The optional field to enable an implicit state buffer to grow
     *&#64;&#64;     without reallocating or copying existing memory.
     *&#64;&#64;     Additional memory will be appended to the end of the buffer and
     *&#64;&#64;     existing data will be preserved.
     *&#64;&#64;     This option is only available for CUDA memory and requires enabling
     *&#64;&#64;     use_same_buffer_for_input_output. When using this option,
     *&#64;&#64;     StateBuffer call will always return CUDA memory even if CPU memory
     *&#64;&#64;     is requested.
     *&#64;&#64;
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool use_growable_memory = 7;</code>
     * @return bool
     */
    public function getUseGrowableMemory()
    {
        return $this->use_growable_memory;
    }

    /**
     *&#64;&#64;  .. cpp:var:: bool use_growable_memory
     *&#64;&#64;
     *&#64;&#64;     The optional field to enable an implicit state buffer to grow
     *&#64;&#64;     without reallocating or copying existing memory.
     *&#64;&#64;     Additional memory will be appended to the end of the buffer and
     *&#64;&#64;     existing data will be preserved.
     *&#64;&#64;     This option is only available for CUDA memory and requires enabling
     *&#64;&#64;     use_same_buffer_for_input_output. When using this option,
     *&#64;&#64;     StateBuffer call will always return CUDA memory even if CPU memory
     *&#64;&#64;     is requested.
     *&#64;&#64;
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool use_growable_memory = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setUseGrowableMemory($var)
    {
        GPBUtil::checkBool($var);
        $this->use_growable_memory = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(State::class, \Inference\ModelSequenceBatching_State::class);


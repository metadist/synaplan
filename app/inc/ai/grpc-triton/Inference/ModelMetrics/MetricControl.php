<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelMetrics;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:var:: message MetricControl
 *&#64;&#64;
 *&#64;&#64;     Override metrics settings of this model.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelMetrics.MetricControl</code>
 */
class MetricControl extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;  .. cpp:var:: MetricIdentifier metric_identifier
     *&#64;&#64;
     *&#64;&#64;     The identifier defining metrics to be overridden with the
     *&#64;&#64;     metric_options.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelMetrics.MetricControl.MetricIdentifier metric_identifier = 1;</code>
     */
    protected $metric_identifier = null;
    protected $metric_options;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Inference\ModelMetrics\MetricControl\MetricIdentifier $metric_identifier
     *          &#64;&#64;  .. cpp:var:: MetricIdentifier metric_identifier
     *          &#64;&#64;
     *          &#64;&#64;     The identifier defining metrics to be overridden with the
     *          &#64;&#64;     metric_options.
     *          &#64;&#64;
     *     @type \Inference\ModelMetrics\MetricControl\HistogramOptions $histogram_options
     *          &#64;&#64;  .. cpp:var:: HistogramOptions histogram_options
     *          &#64;&#64;
     *          &#64;&#64;     Histogram options.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;  .. cpp:var:: MetricIdentifier metric_identifier
     *&#64;&#64;
     *&#64;&#64;     The identifier defining metrics to be overridden with the
     *&#64;&#64;     metric_options.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelMetrics.MetricControl.MetricIdentifier metric_identifier = 1;</code>
     * @return \Inference\ModelMetrics\MetricControl\MetricIdentifier
     */
    public function getMetricIdentifier()
    {
        return $this->metric_identifier;
    }

    /**
     *&#64;&#64;  .. cpp:var:: MetricIdentifier metric_identifier
     *&#64;&#64;
     *&#64;&#64;     The identifier defining metrics to be overridden with the
     *&#64;&#64;     metric_options.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelMetrics.MetricControl.MetricIdentifier metric_identifier = 1;</code>
     * @param \Inference\ModelMetrics\MetricControl\MetricIdentifier $var
     * @return $this
     */
    public function setMetricIdentifier($var)
    {
        GPBUtil::checkMessage($var, \Inference\ModelMetrics_MetricControl_MetricIdentifier::class);
        $this->metric_identifier = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: HistogramOptions histogram_options
     *&#64;&#64;
     *&#64;&#64;     Histogram options.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelMetrics.MetricControl.HistogramOptions histogram_options = 2;</code>
     * @return \Inference\ModelMetrics\MetricControl\HistogramOptions
     */
    public function getHistogramOptions()
    {
        return $this->readOneof(2);
    }

    /**
     *&#64;&#64;  .. cpp:var:: HistogramOptions histogram_options
     *&#64;&#64;
     *&#64;&#64;     Histogram options.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelMetrics.MetricControl.HistogramOptions histogram_options = 2;</code>
     * @param \Inference\ModelMetrics\MetricControl\HistogramOptions $var
     * @return $this
     */
    public function setHistogramOptions($var)
    {
        GPBUtil::checkMessage($var, \Inference\ModelMetrics_MetricControl_HistogramOptions::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMetricOptions()
    {
        return $this->whichOneof("metric_options");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(MetricControl::class, \Inference\ModelMetrics_MetricControl::class);


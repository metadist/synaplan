<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;.. cpp:var:: message ModelQueuePolicy
 *&#64;&#64;
 *&#64;&#64;   Queue policy for inference requests.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelQueuePolicy</code>
 */
class ModelQueuePolicy extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: TimeoutAction timeout_action
     *&#64;&#64;
     *&#64;&#64;     The action applied to timed-out request.
     *&#64;&#64;     The default action is REJECT.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelQueuePolicy.TimeoutAction timeout_action = 1;</code>
     */
    protected $timeout_action = 0;
    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: uint64 default_timeout_microseconds
     *&#64;&#64;
     *&#64;&#64;     The default timeout for every request, in microseconds.
     *&#64;&#64;     The default value is 0 which indicates that no timeout is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 default_timeout_microseconds = 2;</code>
     */
    protected $default_timeout_microseconds = 0;
    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: bool allow_timeout_override
     *&#64;&#64;
     *&#64;&#64;     Whether individual request can override the default timeout value.
     *&#64;&#64;     When true, individual requests can set a timeout that is less than
     *&#64;&#64;     the default timeout value but may not increase the timeout.
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool allow_timeout_override = 3;</code>
     */
    protected $allow_timeout_override = false;
    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: uint32 max_queue_size
     *&#64;&#64;
     *&#64;&#64;     The maximum queue size for holding requests. A request will be
     *&#64;&#64;     rejected immediately if it can't be enqueued because the queue is
     *&#64;&#64;     full. The default value is 0 which indicates that no maximum
     *&#64;&#64;     queue size is enforced.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 max_queue_size = 4;</code>
     */
    protected $max_queue_size = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $timeout_action
     *          &#64;&#64;
     *          &#64;&#64;  .. cpp:var:: TimeoutAction timeout_action
     *          &#64;&#64;
     *          &#64;&#64;     The action applied to timed-out request.
     *          &#64;&#64;     The default action is REJECT.
     *          &#64;&#64;
     *     @type int|string $default_timeout_microseconds
     *          &#64;&#64;
     *          &#64;&#64;  .. cpp:var:: uint64 default_timeout_microseconds
     *          &#64;&#64;
     *          &#64;&#64;     The default timeout for every request, in microseconds.
     *          &#64;&#64;     The default value is 0 which indicates that no timeout is set.
     *          &#64;&#64;
     *     @type bool $allow_timeout_override
     *          &#64;&#64;
     *          &#64;&#64;  .. cpp:var:: bool allow_timeout_override
     *          &#64;&#64;
     *          &#64;&#64;     Whether individual request can override the default timeout value.
     *          &#64;&#64;     When true, individual requests can set a timeout that is less than
     *          &#64;&#64;     the default timeout value but may not increase the timeout.
     *          &#64;&#64;     The default value is false.
     *          &#64;&#64;
     *     @type int $max_queue_size
     *          &#64;&#64;
     *          &#64;&#64;  .. cpp:var:: uint32 max_queue_size
     *          &#64;&#64;
     *          &#64;&#64;     The maximum queue size for holding requests. A request will be
     *          &#64;&#64;     rejected immediately if it can't be enqueued because the queue is
     *          &#64;&#64;     full. The default value is 0 which indicates that no maximum
     *          &#64;&#64;     queue size is enforced.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: TimeoutAction timeout_action
     *&#64;&#64;
     *&#64;&#64;     The action applied to timed-out request.
     *&#64;&#64;     The default action is REJECT.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelQueuePolicy.TimeoutAction timeout_action = 1;</code>
     * @return int
     */
    public function getTimeoutAction()
    {
        return $this->timeout_action;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: TimeoutAction timeout_action
     *&#64;&#64;
     *&#64;&#64;     The action applied to timed-out request.
     *&#64;&#64;     The default action is REJECT.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelQueuePolicy.TimeoutAction timeout_action = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeoutAction($var)
    {
        GPBUtil::checkEnum($var, \Inference\ModelQueuePolicy_TimeoutAction::class);
        $this->timeout_action = $var;

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: uint64 default_timeout_microseconds
     *&#64;&#64;
     *&#64;&#64;     The default timeout for every request, in microseconds.
     *&#64;&#64;     The default value is 0 which indicates that no timeout is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 default_timeout_microseconds = 2;</code>
     * @return int|string
     */
    public function getDefaultTimeoutMicroseconds()
    {
        return $this->default_timeout_microseconds;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: uint64 default_timeout_microseconds
     *&#64;&#64;
     *&#64;&#64;     The default timeout for every request, in microseconds.
     *&#64;&#64;     The default value is 0 which indicates that no timeout is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint64 default_timeout_microseconds = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDefaultTimeoutMicroseconds($var)
    {
        GPBUtil::checkUint64($var);
        $this->default_timeout_microseconds = $var;

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: bool allow_timeout_override
     *&#64;&#64;
     *&#64;&#64;     Whether individual request can override the default timeout value.
     *&#64;&#64;     When true, individual requests can set a timeout that is less than
     *&#64;&#64;     the default timeout value but may not increase the timeout.
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool allow_timeout_override = 3;</code>
     * @return bool
     */
    public function getAllowTimeoutOverride()
    {
        return $this->allow_timeout_override;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: bool allow_timeout_override
     *&#64;&#64;
     *&#64;&#64;     Whether individual request can override the default timeout value.
     *&#64;&#64;     When true, individual requests can set a timeout that is less than
     *&#64;&#64;     the default timeout value but may not increase the timeout.
     *&#64;&#64;     The default value is false.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool allow_timeout_override = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowTimeoutOverride($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_timeout_override = $var;

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: uint32 max_queue_size
     *&#64;&#64;
     *&#64;&#64;     The maximum queue size for holding requests. A request will be
     *&#64;&#64;     rejected immediately if it can't be enqueued because the queue is
     *&#64;&#64;     full. The default value is 0 which indicates that no maximum
     *&#64;&#64;     queue size is enforced.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 max_queue_size = 4;</code>
     * @return int
     */
    public function getMaxQueueSize()
    {
        return $this->max_queue_size;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: uint32 max_queue_size
     *&#64;&#64;
     *&#64;&#64;     The maximum queue size for holding requests. A request will be
     *&#64;&#64;     rejected immediately if it can't be enqueued because the queue is
     *&#64;&#64;     full. The default value is 0 which indicates that no maximum
     *&#64;&#64;     queue size is enforced.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 max_queue_size = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxQueueSize($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_queue_size = $var;

        return $this;
    }

}


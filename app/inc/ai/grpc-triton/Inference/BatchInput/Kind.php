<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\BatchInput;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;    .. cpp:enum:: Kind
 *&#64;&#64;
 *&#64;&#64;       The kind of the batch input.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.BatchInput.Kind</code>
 */
class Kind
{
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::BATCH_ELEMENT_COUNT = 0
     *&#64;&#64;
     *&#64;&#64;         The element count of the 'source_input' will be added as
     *&#64;&#64;         input with shape [1].
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_ELEMENT_COUNT = 0;</code>
     */
    const BATCH_ELEMENT_COUNT = 0;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::BATCH_ACCUMULATED_ELEMENT_COUNT = 1
     *&#64;&#64;
     *&#64;&#64;         The accumulated element count of the 'source_input' will be
     *&#64;&#64;         added as input with shape [1]. For example, if there is a
     *&#64;&#64;         batch of two request, each with 2 elements, an input of value
     *&#64;&#64;         2 will be added to the first request, and an input of value
     *&#64;&#64;         4 will be added to the second request.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_ACCUMULATED_ELEMENT_COUNT = 1;</code>
     */
    const BATCH_ACCUMULATED_ELEMENT_COUNT = 1;
    /**
     *&#64;&#64;      .. cpp:enumerator::
     *&#64;&#64;         Kind::BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO = 2
     *&#64;&#64;
     *&#64;&#64;         The accumulated element count of the 'source_input' will be
     *&#64;&#64;         added as input with shape [1], except for the first request
     *&#64;&#64;         in the batch. For the first request in the batch, the input
     *&#64;&#64;         will have shape [2] where the first element is value 0.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO = 2;</code>
     */
    const BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO = 2;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::BATCH_MAX_ELEMENT_COUNT_AS_SHAPE = 3
     *&#64;&#64;
     *&#64;&#64;         Among the requests in the batch, the max element count of the
     *&#64;&#64;         'source_input' will be added as input with shape
     *&#64;&#64;         [max_element_count] for the first request in the batch.
     *&#64;&#64;         For other requests, such input will be with shape [0].
     *&#64;&#64;         The data of the tensor will be uninitialized.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_MAX_ELEMENT_COUNT_AS_SHAPE = 3;</code>
     */
    const BATCH_MAX_ELEMENT_COUNT_AS_SHAPE = 3;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::BATCH_ITEM_SHAPE = 4
     *&#64;&#64;
     *&#64;&#64;         Among the requests in the batch, the shape of the
     *&#64;&#64;         'source_input' will be added as input with shape
     *&#64;&#64;         [batch_size, len(input_dim)]. For example, if one
     *&#64;&#64;         batch-2 input with shape [3, 1] and batch-1 input
     *&#64;&#64;         with shape [2, 2] are batched, the batch input will
     *&#64;&#64;         have shape [3, 2] and value [ [3, 1], [3, 1], [2, 2]].
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_ITEM_SHAPE = 4;</code>
     */
    const BATCH_ITEM_SHAPE = 4;
    /**
     *&#64;&#64;      .. cpp:enumerator:: Kind::BATCH_ITEM_SHAPE_FLATTEN = 5
     *&#64;&#64;
     *&#64;&#64;         Among the requests in the batch, the shape of the
     *&#64;&#64;         'source_input' will be added as input with single dimensional
     *&#64;&#64;         shape [batch_size * len(input_dim)]. For example, if one
     *&#64;&#64;         batch-2 input with shape [3, 1] and batch-1 input
     *&#64;&#64;         with shape [2, 2] are batched, the batch input will
     *&#64;&#64;         have shape [6] and value [3, 1, 3, 1, 2, 2].
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>BATCH_ITEM_SHAPE_FLATTEN = 5;</code>
     */
    const BATCH_ITEM_SHAPE_FLATTEN = 5;

    private static $valueToName = [
        self::BATCH_ELEMENT_COUNT => 'BATCH_ELEMENT_COUNT',
        self::BATCH_ACCUMULATED_ELEMENT_COUNT => 'BATCH_ACCUMULATED_ELEMENT_COUNT',
        self::BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO => 'BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO',
        self::BATCH_MAX_ELEMENT_COUNT_AS_SHAPE => 'BATCH_MAX_ELEMENT_COUNT_AS_SHAPE',
        self::BATCH_ITEM_SHAPE => 'BATCH_ITEM_SHAPE',
        self::BATCH_ITEM_SHAPE_FLATTEN => 'BATCH_ITEM_SHAPE_FLATTEN',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Kind::class, \Inference\BatchInput_Kind::class);


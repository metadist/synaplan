<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;.. cpp:var:: message ModelWarmup
 *&#64;&#64;
 *&#64;&#64;   Settings used to construct the request sample for model warmup.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelWarmup</code>
 */
class ModelWarmup extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the request sample.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     *&#64;&#64;  .. cpp:var:: uint32 batch_size
     *&#64;&#64;
     *&#64;&#64;     The batch size of the inference request. This must be >= 1. For
     *&#64;&#64;     models that don't support batching, batch_size must be 1. If
     *&#64;&#64;     batch_size > 1, the 'inputs' specified below will be duplicated to
     *&#64;&#64;     match the batch size requested.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 batch_size = 2;</code>
     */
    protected $batch_size = 0;
    /**
     *&#64;&#64;  .. cpp:var:: map<string, Input> inputs
     *&#64;&#64;
     *&#64;&#64;     The warmup meta data associated with every model input, including
     *&#64;&#64;     control tensors.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>map<string, .inference.ModelWarmup.Input> inputs = 3;</code>
     */
    private $inputs;
    /**
     *&#64;&#64;  .. cpp:var:: uint32 count
     *&#64;&#64;
     *&#64;&#64;     The number of iterations that this warmup sample will be executed.
     *&#64;&#64;     For example, if this field is set to 2, 2 model executions using this
     *&#64;&#64;     sample will be scheduled for warmup. Default value is 0 which
     *&#64;&#64;     indicates that this sample will be used only once.
     *&#64;&#64;     Note that for sequence model, 'count' may not work well
     *&#64;&#64;     because the model often expect a valid sequence of requests which
     *&#64;&#64;     should be represented by a series of warmup samples. 'count > 1'
     *&#64;&#64;     essentially "resends" one of the sample, which may invalidate the
     *&#64;&#64;     sequence and result in unexpected warmup failure.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 count = 4;</code>
     */
    protected $count = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *          &#64;&#64;  .. cpp:var:: string name
     *          &#64;&#64;
     *          &#64;&#64;     The name of the request sample.
     *          &#64;&#64;
     *     @type int $batch_size
     *          &#64;&#64;  .. cpp:var:: uint32 batch_size
     *          &#64;&#64;
     *          &#64;&#64;     The batch size of the inference request. This must be >= 1. For
     *          &#64;&#64;     models that don't support batching, batch_size must be 1. If
     *          &#64;&#64;     batch_size > 1, the 'inputs' specified below will be duplicated to
     *          &#64;&#64;     match the batch size requested.
     *          &#64;&#64;
     *     @type array|\Google\Protobuf\Internal\MapField $inputs
     *          &#64;&#64;  .. cpp:var:: map<string, Input> inputs
     *          &#64;&#64;
     *          &#64;&#64;     The warmup meta data associated with every model input, including
     *          &#64;&#64;     control tensors.
     *          &#64;&#64;
     *     @type int $count
     *          &#64;&#64;  .. cpp:var:: uint32 count
     *          &#64;&#64;
     *          &#64;&#64;     The number of iterations that this warmup sample will be executed.
     *          &#64;&#64;     For example, if this field is set to 2, 2 model executions using this
     *          &#64;&#64;     sample will be scheduled for warmup. Default value is 0 which
     *          &#64;&#64;     indicates that this sample will be used only once.
     *          &#64;&#64;     Note that for sequence model, 'count' may not work well
     *          &#64;&#64;     because the model often expect a valid sequence of requests which
     *          &#64;&#64;     should be represented by a series of warmup samples. 'count > 1'
     *          &#64;&#64;     essentially "resends" one of the sample, which may invalidate the
     *          &#64;&#64;     sequence and result in unexpected warmup failure.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the request sample.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *&#64;&#64;  .. cpp:var:: string name
     *&#64;&#64;
     *&#64;&#64;     The name of the request sample.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint32 batch_size
     *&#64;&#64;
     *&#64;&#64;     The batch size of the inference request. This must be >= 1. For
     *&#64;&#64;     models that don't support batching, batch_size must be 1. If
     *&#64;&#64;     batch_size > 1, the 'inputs' specified below will be duplicated to
     *&#64;&#64;     match the batch size requested.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 batch_size = 2;</code>
     * @return int
     */
    public function getBatchSize()
    {
        return $this->batch_size;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint32 batch_size
     *&#64;&#64;
     *&#64;&#64;     The batch size of the inference request. This must be >= 1. For
     *&#64;&#64;     models that don't support batching, batch_size must be 1. If
     *&#64;&#64;     batch_size > 1, the 'inputs' specified below will be duplicated to
     *&#64;&#64;     match the batch size requested.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 batch_size = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setBatchSize($var)
    {
        GPBUtil::checkUint32($var);
        $this->batch_size = $var;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: map<string, Input> inputs
     *&#64;&#64;
     *&#64;&#64;     The warmup meta data associated with every model input, including
     *&#64;&#64;     control tensors.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>map<string, .inference.ModelWarmup.Input> inputs = 3;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getInputs()
    {
        return $this->inputs;
    }

    /**
     *&#64;&#64;  .. cpp:var:: map<string, Input> inputs
     *&#64;&#64;
     *&#64;&#64;     The warmup meta data associated with every model input, including
     *&#64;&#64;     control tensors.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>map<string, .inference.ModelWarmup.Input> inputs = 3;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setInputs($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::MESSAGE, \Inference\ModelWarmup\Input::class);
        $this->inputs = $arr;

        return $this;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint32 count
     *&#64;&#64;
     *&#64;&#64;     The number of iterations that this warmup sample will be executed.
     *&#64;&#64;     For example, if this field is set to 2, 2 model executions using this
     *&#64;&#64;     sample will be scheduled for warmup. Default value is 0 which
     *&#64;&#64;     indicates that this sample will be used only once.
     *&#64;&#64;     Note that for sequence model, 'count' may not work well
     *&#64;&#64;     because the model often expect a valid sequence of requests which
     *&#64;&#64;     should be represented by a series of warmup samples. 'count > 1'
     *&#64;&#64;     essentially "resends" one of the sample, which may invalidate the
     *&#64;&#64;     sequence and result in unexpected warmup failure.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 count = 4;</code>
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     *&#64;&#64;  .. cpp:var:: uint32 count
     *&#64;&#64;
     *&#64;&#64;     The number of iterations that this warmup sample will be executed.
     *&#64;&#64;     For example, if this field is set to 2, 2 model executions using this
     *&#64;&#64;     sample will be scheduled for warmup. Default value is 0 which
     *&#64;&#64;     indicates that this sample will be used only once.
     *&#64;&#64;     Note that for sequence model, 'count' may not work well
     *&#64;&#64;     because the model often expect a valid sequence of requests which
     *&#64;&#64;     should be represented by a series of warmup samples. 'count > 1'
     *&#64;&#64;     essentially "resends" one of the sample, which may invalidate the
     *&#64;&#64;     sequence and result in unexpected warmup failure.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>uint32 count = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->count = $var;

        return $this;
    }

}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelInstanceGroup;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:enum:: Kind
 *&#64;&#64;
 *&#64;&#64;     Kind of this instance group.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.ModelInstanceGroup.Kind</code>
 */
class Kind
{
    /**
     *&#64;&#64;    .. cpp:enumerator:: Kind::KIND_AUTO = 0
     *&#64;&#64;
     *&#64;&#64;       This instance group represents instances that can run on either
     *&#64;&#64;       CPU or GPU. If all GPUs listed in 'gpus' are available then
     *&#64;&#64;       instances will be created on GPU(s), otherwise instances will
     *&#64;&#64;       be created on CPU.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>KIND_AUTO = 0;</code>
     */
    const KIND_AUTO = 0;
    /**
     *&#64;&#64;    .. cpp:enumerator:: Kind::KIND_GPU = 1
     *&#64;&#64;
     *&#64;&#64;       This instance group represents instances that must run on the
     *&#64;&#64;       GPU.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>KIND_GPU = 1;</code>
     */
    const KIND_GPU = 1;
    /**
     *&#64;&#64;    .. cpp:enumerator:: Kind::KIND_CPU = 2
     *&#64;&#64;
     *&#64;&#64;       This instance group represents instances that must run on the
     *&#64;&#64;       CPU.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>KIND_CPU = 2;</code>
     */
    const KIND_CPU = 2;
    /**
     *&#64;&#64;    .. cpp:enumerator:: Kind::KIND_MODEL = 3
     *&#64;&#64;
     *&#64;&#64;       This instance group represents instances that should run on the
     *&#64;&#64;       CPU and/or GPU(s) as specified by the model or backend itself.
     *&#64;&#64;       The inference server will not override the model/backend
     *&#64;&#64;       settings.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>KIND_MODEL = 3;</code>
     */
    const KIND_MODEL = 3;

    private static $valueToName = [
        self::KIND_AUTO => 'KIND_AUTO',
        self::KIND_GPU => 'KIND_GPU',
        self::KIND_CPU => 'KIND_CPU',
        self::KIND_MODEL => 'KIND_MODEL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Kind::class, \Inference\ModelInstanceGroup_Kind::class);


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelOptimizationPolicy;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:enum:: ModelPriority
 *&#64;&#64;
 *&#64;&#64;     Model priorities. A model will be given scheduling and execution
 *&#64;&#64;     preference over models at lower priorities. Current model
 *&#64;&#64;     priorities only work for TensorRT models.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.ModelOptimizationPolicy.ModelPriority</code>
 */
class ModelPriority
{
    /**
     *&#64;&#64;    .. cpp:enumerator:: ModelPriority::PRIORITY_DEFAULT = 0
     *&#64;&#64;
     *&#64;&#64;       The default model priority.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>PRIORITY_DEFAULT = 0;</code>
     */
    const PRIORITY_DEFAULT = 0;
    /**
     *&#64;&#64;    .. cpp:enumerator:: ModelPriority::PRIORITY_MAX = 1
     *&#64;&#64;
     *&#64;&#64;       The maximum model priority.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>PRIORITY_MAX = 1;</code>
     */
    const PRIORITY_MAX = 1;
    /**
     *&#64;&#64;    .. cpp:enumerator:: ModelPriority::PRIORITY_MIN = 2
     *&#64;&#64;
     *&#64;&#64;       The minimum model priority.
     *&#64;&#64;
     *
     * Generated from protobuf enum <code>PRIORITY_MIN = 2;</code>
     */
    const PRIORITY_MIN = 2;

    private static $valueToName = [
        self::PRIORITY_DEFAULT => 'PRIORITY_DEFAULT',
        self::PRIORITY_MAX => 'PRIORITY_MAX',
        self::PRIORITY_MIN => 'PRIORITY_MIN',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ModelPriority::class, \Inference\ModelOptimizationPolicy_ModelPriority::class);


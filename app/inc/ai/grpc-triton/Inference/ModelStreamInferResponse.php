<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc_service.proto

namespace Inference;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;.. cpp:var:: message ModelStreamInferResponse
 *&#64;&#64;
 *&#64;&#64;   Response message for ModelStreamInfer.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelStreamInferResponse</code>
 */
class ModelStreamInferResponse extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: string error_message
     *&#64;&#64;
     *&#64;&#64;     The message describing the error. The empty message
     *&#64;&#64;     indicates the inference was successful without errors.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string error_message = 1;</code>
     */
    protected $error_message = '';
    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: ModelInferResponse infer_response
     *&#64;&#64;
     *&#64;&#64;     Holds the results of the request.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelInferResponse infer_response = 2;</code>
     */
    protected $infer_response = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $error_message
     *          &#64;&#64;
     *          &#64;&#64;  .. cpp:var:: string error_message
     *          &#64;&#64;
     *          &#64;&#64;     The message describing the error. The empty message
     *          &#64;&#64;     indicates the inference was successful without errors.
     *          &#64;&#64;
     *     @type \Inference\ModelInferResponse $infer_response
     *          &#64;&#64;
     *          &#64;&#64;  .. cpp:var:: ModelInferResponse infer_response
     *          &#64;&#64;
     *          &#64;&#64;     Holds the results of the request.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GrpcService::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: string error_message
     *&#64;&#64;
     *&#64;&#64;     The message describing the error. The empty message
     *&#64;&#64;     indicates the inference was successful without errors.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string error_message = 1;</code>
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: string error_message
     *&#64;&#64;
     *&#64;&#64;     The message describing the error. The empty message
     *&#64;&#64;     indicates the inference was successful without errors.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string error_message = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setErrorMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->error_message = $var;

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: ModelInferResponse infer_response
     *&#64;&#64;
     *&#64;&#64;     Holds the results of the request.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelInferResponse infer_response = 2;</code>
     * @return \Inference\ModelInferResponse
     */
    public function getInferResponse()
    {
        return $this->infer_response;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;  .. cpp:var:: ModelInferResponse infer_response
     *&#64;&#64;
     *&#64;&#64;     Holds the results of the request.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.ModelInferResponse infer_response = 2;</code>
     * @param \Inference\ModelInferResponse $var
     * @return $this
     */
    public function setInferResponse($var)
    {
        GPBUtil::checkMessage($var, \Inference\ModelInferResponse::class);
        $this->infer_response = $var;

        return $this;
    }

}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference;

use UnexpectedValueException;

/**
 *&#64;&#64;
 *&#64;&#64;.. cpp:enum:: DataType
 *&#64;&#64;
 *&#64;&#64;   Data types supported for input and output tensors.
 *&#64;&#64;
 *
 * Protobuf type <code>inference.DataType</code>
 */
class DataType
{
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::INVALID = 0
     *
     * Generated from protobuf enum <code>TYPE_INVALID = 0;</code>
     */
    const TYPE_INVALID = 0;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::BOOL = 1
     *
     * Generated from protobuf enum <code>TYPE_BOOL = 1;</code>
     */
    const TYPE_BOOL = 1;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::UINT8 = 2
     *
     * Generated from protobuf enum <code>TYPE_UINT8 = 2;</code>
     */
    const TYPE_UINT8 = 2;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::UINT16 = 3
     *
     * Generated from protobuf enum <code>TYPE_UINT16 = 3;</code>
     */
    const TYPE_UINT16 = 3;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::UINT32 = 4
     *
     * Generated from protobuf enum <code>TYPE_UINT32 = 4;</code>
     */
    const TYPE_UINT32 = 4;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::UINT64 = 5
     *
     * Generated from protobuf enum <code>TYPE_UINT64 = 5;</code>
     */
    const TYPE_UINT64 = 5;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::INT8 = 6
     *
     * Generated from protobuf enum <code>TYPE_INT8 = 6;</code>
     */
    const TYPE_INT8 = 6;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::INT16 = 7
     *
     * Generated from protobuf enum <code>TYPE_INT16 = 7;</code>
     */
    const TYPE_INT16 = 7;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::INT32 = 8
     *
     * Generated from protobuf enum <code>TYPE_INT32 = 8;</code>
     */
    const TYPE_INT32 = 8;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::INT64 = 9
     *
     * Generated from protobuf enum <code>TYPE_INT64 = 9;</code>
     */
    const TYPE_INT64 = 9;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::FP16 = 10
     *
     * Generated from protobuf enum <code>TYPE_FP16 = 10;</code>
     */
    const TYPE_FP16 = 10;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::FP32 = 11
     *
     * Generated from protobuf enum <code>TYPE_FP32 = 11;</code>
     */
    const TYPE_FP32 = 11;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::FP64 = 12
     *
     * Generated from protobuf enum <code>TYPE_FP64 = 12;</code>
     */
    const TYPE_FP64 = 12;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::STRING = 13
     *
     * Generated from protobuf enum <code>TYPE_STRING = 13;</code>
     */
    const TYPE_STRING = 13;
    /**
     *&#64;&#64;  .. cpp:enumerator:: DataType::BF16 = 14
     *
     * Generated from protobuf enum <code>TYPE_BF16 = 14;</code>
     */
    const TYPE_BF16 = 14;

    private static $valueToName = [
        self::TYPE_INVALID => 'TYPE_INVALID',
        self::TYPE_BOOL => 'TYPE_BOOL',
        self::TYPE_UINT8 => 'TYPE_UINT8',
        self::TYPE_UINT16 => 'TYPE_UINT16',
        self::TYPE_UINT32 => 'TYPE_UINT32',
        self::TYPE_UINT64 => 'TYPE_UINT64',
        self::TYPE_INT8 => 'TYPE_INT8',
        self::TYPE_INT16 => 'TYPE_INT16',
        self::TYPE_INT32 => 'TYPE_INT32',
        self::TYPE_INT64 => 'TYPE_INT64',
        self::TYPE_FP16 => 'TYPE_FP16',
        self::TYPE_FP32 => 'TYPE_FP32',
        self::TYPE_FP64 => 'TYPE_FP64',
        self::TYPE_STRING => 'TYPE_STRING',
        self::TYPE_BF16 => 'TYPE_BF16',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: model_config.proto

namespace Inference\ModelWarmup;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *&#64;&#64;
 *&#64;&#64;  .. cpp:var:: message Input
 *&#64;&#64;
 *&#64;&#64;     Meta data associated with an input.
 *&#64;&#64;
 *
 * Generated from protobuf message <code>inference.ModelWarmup.Input</code>
 */
class Input extends \Google\Protobuf\Internal\Message
{
    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The data-type of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 1;</code>
     */
    protected $data_type = 0;
    /**
     *&#64;&#64;    .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;       The shape of the input tensor, not including the batch dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 2;</code>
     */
    private $dims;
    protected $input_data_type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $data_type
     *          &#64;&#64;    .. cpp:var:: DataType data_type
     *          &#64;&#64;
     *          &#64;&#64;       The data-type of the input.
     *          &#64;&#64;
     *     @type int[]|string[]|\Google\Protobuf\Internal\RepeatedField $dims
     *          &#64;&#64;    .. cpp:var:: int64 dims (repeated)
     *          &#64;&#64;
     *          &#64;&#64;       The shape of the input tensor, not including the batch dimension.
     *          &#64;&#64;
     *     @type bool $zero_data
     *          &#64;&#64;
     *          &#64;&#64;    .. cpp:var:: bool zero_data
     *          &#64;&#64;
     *          &#64;&#64;       The identifier for using zeros as input data. Note that the
     *          &#64;&#64;       value of 'zero_data' will not be checked, instead, zero data
     *          &#64;&#64;       will be used as long as the field is set.
     *          &#64;&#64;
     *     @type bool $random_data
     *          &#64;&#64;
     *          &#64;&#64;    .. cpp:var:: bool random_data
     *          &#64;&#64;
     *          &#64;&#64;       The identifier for using random data as input data. Note that
     *          &#64;&#64;       the value of 'random_data' will not be checked, instead,
     *          &#64;&#64;       random data will be used as long as the field is set.
     *          &#64;&#64;
     *     @type string $input_data_file
     *          &#64;&#64;    .. cpp:var:: string input_data_file
     *          &#64;&#64;
     *          &#64;&#64;       The file whose content will be used as raw input data in
     *          &#64;&#64;       row-major order. The file must be provided in a sub-directory
     *          &#64;&#64;       'warmup' under the model directory. The file contents should be
     *          &#64;&#64;       in binary format. For TYPE_STRING data-type, an element is
     *          &#64;&#64;       represented by a 4-byte unsigned integer giving the length
     *          &#64;&#64;       followed by the actual bytes.
     *          &#64;&#64;
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModelConfig::initOnce();
        parent::__construct($data);
    }

    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The data-type of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 1;</code>
     * @return int
     */
    public function getDataType()
    {
        return $this->data_type;
    }

    /**
     *&#64;&#64;    .. cpp:var:: DataType data_type
     *&#64;&#64;
     *&#64;&#64;       The data-type of the input.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>.inference.DataType data_type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setDataType($var)
    {
        GPBUtil::checkEnum($var, \Inference\DataType::class);
        $this->data_type = $var;

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;       The shape of the input tensor, not including the batch dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDims()
    {
        return $this->dims;
    }

    /**
     *&#64;&#64;    .. cpp:var:: int64 dims (repeated)
     *&#64;&#64;
     *&#64;&#64;       The shape of the input tensor, not including the batch dimension.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>repeated int64 dims = 2;</code>
     * @param int[]|string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDims($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->dims = $arr;

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;    .. cpp:var:: bool zero_data
     *&#64;&#64;
     *&#64;&#64;       The identifier for using zeros as input data. Note that the
     *&#64;&#64;       value of 'zero_data' will not be checked, instead, zero data
     *&#64;&#64;       will be used as long as the field is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool zero_data = 3;</code>
     * @return bool
     */
    public function getZeroData()
    {
        return $this->readOneof(3);
    }

    /**
     *&#64;&#64;
     *&#64;&#64;    .. cpp:var:: bool zero_data
     *&#64;&#64;
     *&#64;&#64;       The identifier for using zeros as input data. Note that the
     *&#64;&#64;       value of 'zero_data' will not be checked, instead, zero data
     *&#64;&#64;       will be used as long as the field is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool zero_data = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setZeroData($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     *&#64;&#64;
     *&#64;&#64;    .. cpp:var:: bool random_data
     *&#64;&#64;
     *&#64;&#64;       The identifier for using random data as input data. Note that
     *&#64;&#64;       the value of 'random_data' will not be checked, instead,
     *&#64;&#64;       random data will be used as long as the field is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool random_data = 4;</code>
     * @return bool
     */
    public function getRandomData()
    {
        return $this->readOneof(4);
    }

    /**
     *&#64;&#64;
     *&#64;&#64;    .. cpp:var:: bool random_data
     *&#64;&#64;
     *&#64;&#64;       The identifier for using random data as input data. Note that
     *&#64;&#64;       the value of 'random_data' will not be checked, instead,
     *&#64;&#64;       random data will be used as long as the field is set.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>bool random_data = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setRandomData($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     *&#64;&#64;    .. cpp:var:: string input_data_file
     *&#64;&#64;
     *&#64;&#64;       The file whose content will be used as raw input data in
     *&#64;&#64;       row-major order. The file must be provided in a sub-directory
     *&#64;&#64;       'warmup' under the model directory. The file contents should be
     *&#64;&#64;       in binary format. For TYPE_STRING data-type, an element is
     *&#64;&#64;       represented by a 4-byte unsigned integer giving the length
     *&#64;&#64;       followed by the actual bytes.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string input_data_file = 5;</code>
     * @return string
     */
    public function getInputDataFile()
    {
        return $this->readOneof(5);
    }

    /**
     *&#64;&#64;    .. cpp:var:: string input_data_file
     *&#64;&#64;
     *&#64;&#64;       The file whose content will be used as raw input data in
     *&#64;&#64;       row-major order. The file must be provided in a sub-directory
     *&#64;&#64;       'warmup' under the model directory. The file contents should be
     *&#64;&#64;       in binary format. For TYPE_STRING data-type, an element is
     *&#64;&#64;       represented by a 4-byte unsigned integer giving the length
     *&#64;&#64;       followed by the actual bytes.
     *&#64;&#64;
     *
     * Generated from protobuf field <code>string input_data_file = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setInputDataFile($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getInputDataType()
    {
        return $this->whichOneof("input_data_type");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Input::class, \Inference\ModelWarmup_Input::class);

